# -*- encoding: utf-8 -*-
import json
import os
import requests
import sys
import uuid

from flask import Flask, request

try:
    import apiai
except ImportError:
    sys.path.append(
        os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir)
    )
    import apiai

app = Flask(__name__)

# Client Access Token for accessing our API AI Bot
CLIENT_ACCESS_TOKEN = os.environ['CLIENT_ACCESS_TOKEN']
# Page Access Token for Facebook Page where the conversation can be started with the bot.
PAGE_ACCESS_TOKEN = os.environ['PAGE_ACCESS_TOKEN']
# Token created whilst configuring Webhook subscription.
VERIFY_TOKEN = os.environ['VERIFY_TOKEN']

# An endpoint to ApiAi, an object used for making requests to a particular agent.
ai = apiai.ApiAI(CLIENT_ACCESS_TOKEN)
session_ids = {}


@app.route('/', methods=['GET'])
def print_signage():
    return "Contact: havanthao93@gmail.com."


# Handling HTTP GET when Facebook subscribes to our Webhook.
@app.route('/webhook', methods=['GET'])
def handle_verification():
    print("Handling Verification.")
    # Checking if the GET was sent by Messenger by matching the configured secret token.
    if request.args.get('hub.verify_token', '') == VERIFY_TOKEN:
        # Request.args contains the parsed contents of the query string.
        # The query string is appended to a HTTP call, containing parameters and values.     
        print("Webhook verified!")
        # Returning a random string that messenger has sent to us, for verification on their end.
        return request.args.get('hub.challenge', '')
    else:
        print("Wrong verification token!")
        return "Error, wrong validation token"


# Handling HTTP POST when Facebook sends us a payload of messages that have
# have been sent to our bot. We're responding to a Messenger callback, one of
# the events our webhook is subscribed to has fired.
@app.route('/webhook', methods=['POST'])
def handle_message():
    data = request.get_json()

    if data["object"] == "page":
        # Iterating through entries and messaging events batched and sent to us by Messenger
        for entry in data["entry"]:
            if entry.get('messaging'):
                for messaging_event in entry["messaging"]:
                    message = messaging_event.get("message")
                    postback = messaging_event.get("postback")

                    # Check valid user message.
                    if (message and not message.get("is_echo")) or (postback and postback.get("payload")):
                        sender_id = messaging_event["sender"]["id"]  # the facebook user ID
                        message_text = message.get("text") if message else postback.get("payload")  # the message's text

                        print(message_text)
                        ai_response = ai_request(sender_id, message_text)  # Get response from api.ai
                        send_message_staggered(sender_id, ai_response)  # Sending a response to the user.

    return "ok"


# Takes a string of natural language text, passes it to ApiAI, returns a 
# response generated by an ApiAI bot.
def ai_request(sender_id, user_text):
    # Sending a text query to our bot with text sent by the user.
    api_request = ai.text_request()
    api_request.query = user_text

    # Set session id
    if sender_id not in session_ids:
        session_ids[sender_id] = str(uuid.uuid4())

    api_request.session_id = session_ids[sender_id]

    # Receiving the response.
    response = json.loads(api_request.getresponse().read().decode('utf-8'))
    response_status = response['status']['code']
    if response_status == 200:
        # Sending the textual response of the bot.
        return response['result']['fulfillment']

    else:
        return {
            'speech': "Sorry, I couldn't understand that question.",
            'messages': {},
        }


# Sending a message back through Messenger.
def send_message(sender_id, message):
    r = requests.post(
        "https://graph.facebook.com/v2.6/me/messages",
        params={"access_token": PAGE_ACCESS_TOKEN},
        headers={"Content-Type": "application/json"},
        data=json.dumps({
            "recipient": {"id": sender_id},
            "message": message
        })
    )


# Sends messages
def send_message_staggered(sender_id, api_response):
    send_message(sender_id, {"text": api_response['speech']})

    if bool(api_response['messages']):
        for message in api_response['messages']:
            if message['type'] == 4:
                send_message(sender_id, message['payload']['facebook'])


# run server
if __name__ == "__main__":
    app.run()
